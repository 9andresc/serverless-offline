service: aws-service

plugins:
  - serverless-offline
  - serverless-offline-tester

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    hello: world

# Function names are prefixed with x_ because of
# https://github.com/serverless/serverless/issues/2614
functions:
  a_basicLambdaProxy:
    handler: handler.basicLambdaProxy
    events:
      - http:
          path: basicLambdaProxy
          method: any

  b_basicLambdaProxy500:
    handler: handler.basicLambdaProxy500
    events:
      - http:
          path: basicLambdaProxy500
          method: any

  c_basicLambda:
    handler: handler.basicLambda
    events:
      - http:
          path: basicLambda
          method: any
          integration: lambda

  d_basicLambda500:
    handler: handler.basicLambda500
    events:
      - http:
          path: basicLambda500
          method: any
          integration: lambda

  e_getLambdaProxy:
    handler: handler.getLambdaProxy
    events:
      - http:
          path: getLambdaProxy
          method: get

  f_postLambdaProxy:
    handler: handler.postLambdaProxy
    events:
      - http:
          path: postLambdaProxy
          method: post

  g_getAndPostLambdaProxy:
    handler: handler.getAndPostLambdaProxy
    events:
      - http:
          path: getAndPostLambdaProxy
          method: get
      - http:
          path: getAndPostLambdaProxy
          method: post

  h_environmentLambdaProxy:
    handler: handler.environmentLambdaProxy
    environment:
      hello: "world-wide"
    events:
      - http:
          path: environmentLambdaProxy
          method: any

  i_requestTemplateLambda:
    handler: handler.requestTemplateLambda
    events:
      - http:
          path: requestTemplateLambda
          method: any
          integration: lambda
          template:
            text/xhtml: '{ "stage" : "$context.stage" }'
            application/json: '{ "httpMethod" : "$context.httpMethod" }'

  j_requestTemplateFileLambda:
    handler: handler.requestTemplateFileLambda
    events:
      - http:
          path: requestTemplateFileLambda
          method: any
          integration: lambda
          template:
            application/json: ${file('./requestTemplateFileLambda.vm')}

  z_catchAll:
    handler: handler.catchAll
    events:
      - http:
          path: /{proxy+}
          method: ANY

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# Other type of event (fyi)
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
