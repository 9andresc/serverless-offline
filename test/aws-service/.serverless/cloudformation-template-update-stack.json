{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "AUnderscorebasicLambdaProxyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-a_basicLambdaProxy"
      }
    },
    "BUnderscorebasicLambdaProxy500LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-b_basicLambdaProxy500"
      }
    },
    "CUnderscorebasicLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-c_basicLambda"
      }
    },
    "DUnderscorebasicLambda500LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-d_basicLambda500"
      }
    },
    "EUnderscoregetLambdaProxyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-e_getLambdaProxy"
      }
    },
    "FUnderscorepostLambdaProxyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-f_postLambdaProxy"
      }
    },
    "GUnderscoregetAndPostLambdaProxyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-g_getAndPostLambdaProxy"
      }
    },
    "HUnderscoreenvironmentLambdaProxyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-h_environmentLambdaProxy"
      }
    },
    "IUnderscorerequestTemplateLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-i_requestTemplateLambda"
      }
    },
    "JUnderscorecatchAllLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-service-dev-j_catchAll"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "aws-service",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "AUnderscorebasicLambdaProxyLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "BUnderscorebasicLambdaProxy500LogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "CUnderscorebasicLambdaLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DUnderscorebasicLambda500LogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "EUnderscoregetLambdaProxyLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "FUnderscorepostLambdaProxyLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "GUnderscoregetAndPostLambdaProxyLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "HUnderscoreenvironmentLambdaProxyLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "IUnderscorerequestTemplateLambdaLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "JUnderscorecatchAllLogGroup",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "AUnderscorebasicLambdaProxyLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "BUnderscorebasicLambdaProxy500LogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "CUnderscorebasicLambdaLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "DUnderscorebasicLambda500LogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "EUnderscoregetLambdaProxyLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "FUnderscorepostLambdaProxyLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "GUnderscoregetAndPostLambdaProxyLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "HUnderscoreenvironmentLambdaProxyLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "IUnderscorerequestTemplateLambdaLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":",
                        [
                          {
                            "Fn::GetAtt": [
                              "JUnderscorecatchAllLogGroup",
                              "Arn"
                            ]
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "aws-service",
              "dev",
              "us-east-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AUnderscorebasicLambdaProxyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-a_basicLambdaProxy",
        "Handler": "handler.basicLambdaProxy",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "AUnderscorebasicLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AUnderscorebasicLambdaProxyLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "BUnderscorebasicLambdaProxy500LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-b_basicLambdaProxy500",
        "Handler": "handler.basicLambdaProxy500",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "BUnderscorebasicLambdaProxy500LambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BUnderscorebasicLambdaProxy500LambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "CUnderscorebasicLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-c_basicLambda",
        "Handler": "handler.basicLambda",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "CUnderscorebasicLambdaLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CUnderscorebasicLambdaLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "DUnderscorebasicLambda500LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-d_basicLambda500",
        "Handler": "handler.basicLambda500",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "DUnderscorebasicLambda500LambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DUnderscorebasicLambda500LambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "EUnderscoregetLambdaProxyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-e_getLambdaProxy",
        "Handler": "handler.getLambdaProxy",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "EUnderscoregetLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EUnderscoregetLambdaProxyLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "FUnderscorepostLambdaProxyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-f_postLambdaProxy",
        "Handler": "handler.postLambdaProxy",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "FUnderscorepostLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FUnderscorepostLambdaProxyLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "GUnderscoregetAndPostLambdaProxyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-g_getAndPostLambdaProxy",
        "Handler": "handler.getAndPostLambdaProxy",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "GUnderscoregetAndPostLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GUnderscoregetAndPostLambdaProxyLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "HUnderscoreenvironmentLambdaProxyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-h_environmentLambdaProxy",
        "Handler": "handler.environmentLambdaProxy",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world-wide"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "HUnderscoreenvironmentLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HUnderscoreenvironmentLambdaProxyLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "IUnderscorerequestTemplateLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-i_requestTemplateLambda",
        "Handler": "handler.requestTemplateLambda",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "IUnderscorerequestTemplateLambdaLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IUnderscorerequestTemplateLambdaLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "JUnderscorecatchAllLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-service/dev/1489417883069-2017-03-13T15:11:23.069Z/aws-service.zip"
        },
        "FunctionName": "aws-service-dev-j_catchAll",
        "Handler": "handler.catchAll",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "hello": "world"
          }
        }
      },
      "DependsOn": [
        "IamRoleLambdaExecution"
      ]
    },
    "JUnderscorecatchAllLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "JUnderscorecatchAllLambdaFunction"
        },
        "CodeSha256": "DNkpVYYSaDMPhOpyx/y9Dpf5iCKQFTapscWs7Rh+2sk="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-aws-service"
      }
    },
    "ApiGatewayResourceBasiclambdaproxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "basicLambdaProxy",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBasiclambdaproxy500": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "basicLambdaProxy500",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBasiclambda": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "basicLambda",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBasiclambda500": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "basicLambda500",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetlambdaproxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getLambdaProxy",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePostlambdaproxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "postLambdaProxy",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetandpostlambdaproxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "getAndPostLambdaProxy",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEnvironmentlambdaproxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "environmentLambdaProxy",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRequesttemplatelambda": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "requestTemplateLambda",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodBasiclambdaproxyAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBasiclambdaproxy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AUnderscorebasicLambdaProxyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodBasiclambdaproxy500Any": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBasiclambdaproxy500"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BUnderscorebasicLambdaProxy500LambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodBasiclambdaAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBasiclambda"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CUnderscorebasicLambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "[\\s\\S]*\\[504\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      }
    },
    "ApiGatewayMethodBasiclambda500Any": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBasiclambda500"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DUnderscorebasicLambda500LambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "[\\s\\S]*\\[504\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      }
    },
    "ApiGatewayMethodGetlambdaproxyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetlambdaproxy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "EUnderscoregetLambdaProxyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPostlambdaproxyPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePostlambdaproxy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "FUnderscorepostLambdaProxyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGetandpostlambdaproxyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetandpostlambdaproxy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GUnderscoregetAndPostLambdaProxyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGetandpostlambdaproxyPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetandpostlambdaproxy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GUnderscoregetAndPostLambdaProxyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodEnvironmentlambdaproxyAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEnvironmentlambdaproxy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HUnderscoreenvironmentLambdaProxyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodRequesttemplatelambdaAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRequesttemplatelambda"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IUnderscorerequestTemplateLambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "[\\s\\S]*\\[504\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      }
    },
    "ApiGatewayMethodProxyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "JUnderscorecatchAllLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1489417883097": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodBasiclambdaproxyAny",
        "ApiGatewayMethodBasiclambdaproxy500Any",
        "ApiGatewayMethodBasiclambdaAny",
        "ApiGatewayMethodBasiclambda500Any",
        "ApiGatewayMethodGetlambdaproxyGet",
        "ApiGatewayMethodPostlambdaproxyPost",
        "ApiGatewayMethodGetandpostlambdaproxyGet",
        "ApiGatewayMethodGetandpostlambdaproxyPost",
        "ApiGatewayMethodEnvironmentlambdaproxyAny",
        "ApiGatewayMethodRequesttemplatelambdaAny",
        "ApiGatewayMethodProxyVarAny"
      ]
    },
    "AUnderscorebasicLambdaProxyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AUnderscorebasicLambdaProxyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "BUnderscorebasicLambdaProxy500LambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BUnderscorebasicLambdaProxy500LambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CUnderscorebasicLambdaLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CUnderscorebasicLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DUnderscorebasicLambda500LambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DUnderscorebasicLambda500LambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "EUnderscoregetLambdaProxyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EUnderscoregetLambdaProxyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FUnderscorepostLambdaProxyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FUnderscorepostLambdaProxyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GUnderscoregetAndPostLambdaProxyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GUnderscoregetAndPostLambdaProxyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "HUnderscoreenvironmentLambdaProxyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HUnderscoreenvironmentLambdaProxyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "IUnderscorerequestTemplateLambdaLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IUnderscorerequestTemplateLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "JUnderscorecatchAllLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "JUnderscorecatchAllLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "AUnderscorebasicLambdaProxyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AUnderscorebasicLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "BUnderscorebasicLambdaProxy500LambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BUnderscorebasicLambdaProxy500LambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "CUnderscorebasicLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CUnderscorebasicLambdaLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "DUnderscorebasicLambda500LambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DUnderscorebasicLambda500LambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "EUnderscoregetLambdaProxyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EUnderscoregetLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "FUnderscorepostLambdaProxyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FUnderscorepostLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "GUnderscoregetAndPostLambdaProxyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GUnderscoregetAndPostLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "HUnderscoreenvironmentLambdaProxyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HUnderscoreenvironmentLambdaProxyLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "IUnderscorerequestTemplateLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IUnderscorerequestTemplateLambdaLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "JUnderscorecatchAllLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "JUnderscorecatchAllLambdaVersionDNkpVYYSaDMPhOpyxy9Dpf5iCKQFTapscWs7Rh2sk"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.us-east-1.amazonaws.com/dev"
          ]
        ]
      }
    }
  }
}